package ${package.Controller};

import cn.hutool.core.bean.BeanUtil;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import $!{package.Entity}.$!{entity};
import $!{package.Service}.$!{table.serviceName};
import com.java2e.martin.common.core.api.ApiErrorCode;
import com.java2e.martin.common.core.api.R;
import com.java2e.martin.common.log.annotation.MartinLog;
import io.swagger.annotations.Api;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end

import javax.validation.Valid;
import java.time.LocalDateTime;
import java.util.Map;


#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @version 1.0
 * @date ${date}
 * @describtion
 * @since 1.0
 */
@Slf4j
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
#set($str=$!table.serviceName)
#set($servicename=$!str.substring(0,1).toLowerCase()+$!str.substring(1))
#set($entityname=$!entity.substring(0,1).toLowerCase()+$!entity.substring(1))
#if("$entityname"=="log")
    #set($entityname="logger")
#end
#if("$entityname"=="page")
    #set($entityname="pages")
#end
@RequestMapping("#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
@Api(value = "$!{entity} 控制器", tags = "$!{table.comment}")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    @Autowired
    private $!{table.serviceName} $!servicename;


    /**
     * 添加
     *
     * @param $!{entityname} $!{entity}
     * @return R
     */
    @MartinLog("添加$!{table.comment}")
    @PostMapping("/add")
    @PreAuthorize("hasAuthority('$!{table.name}_add')")
    public R save(@Valid @RequestBody $!{entity} $!{entityname}) {
        return R.ok($!{servicename}.save($!{entityname}));
    }

    /**
     * 删除
     *
     * @param $!{entityname} $!{entity}
     * @return R
     */
    @MartinLog("删除$!{table.comment}")
    @PostMapping("/delete")
    @PreAuthorize("hasAuthority('$!{table.name}_del')")
    public R removeById(@Valid @RequestBody $!{entity} $!{entityname}) {
        return R.ok($!{servicename}.removeById($!{entityname}.getId()));
    }

    /**
     * 编辑
     *
     * @param $!{entityname} $!{entity}
     * @return R
     */
    @MartinLog("编辑$!{table.comment}")
    @PostMapping("/update")
    @PreAuthorize("hasAuthority('$!{table.name}_edit')")
    public R update(@Valid @RequestBody $!{entity} $!{entityname}) {
        return R.ok($!{servicename}.updateById($!{entityname}));
    }

    /**
     * 通过ID查询
     *
     * @param $!{entityname} $!{entity}
     * @return R
     */
    @MartinLog("单个查询$!{table.comment}")
    @PostMapping("/get")
    @PreAuthorize("hasAuthority('$!{table.name}_get')")
    public R getById(@RequestBody $!{entity} $!{entityname}) {
        return R.ok($!{servicename}.getById($!{entityname}.getId()));
    }

    /**
     * 分页查询
     *
     * @param params 分页以及查询参数
     * @return R
     */
    @MartinLog("分页查询$!{table.comment}")
    @PostMapping("/page")
    @PreAuthorize("hasAuthority('$!{table.name}_page')")
    public R<IPage> getPage(@RequestBody Map params) {
        try {
            return R.ok($!{servicename}.getPage(params));
        } catch (IllegalAccessException e) {
            log.error("", e);
            return R.failed(ApiErrorCode.FAILED);
        } catch (InstantiationException e) {
            log.error("", e);
            return R.failed(ApiErrorCode.FAILED);
        }
    }

    @MartinLog("批量删除$!{table.comment}")
    @PostMapping("/deleteBatch")
    @PreAuthorize("hasAuthority('$!{table.name}_deleteBatch')")
    public R removeBatch(@RequestBody String ids) {
        List<String> idList = Arrays.stream(ids.split(",")).collect(Collectors.toList());
        if (CollUtil.isEmpty(idList)) {
            return R.failed("id 不能为空");
        }
        return R.ok($!{servicename}.removeByIds(idList));
    }


}

#end
